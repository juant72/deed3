import React, { useState, useMemo, useCallback } from "react";
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const TokenomicsSection = React.memo(() => {
  const [activeTab, setActiveTab] = useState("overview");

  // Memoize data to prevent re-renders
  const tokenDistribution = useMemo(() => [
    { name: 'Property Tokens', value: 40, color: '#3B82F6' },
    { name: 'Staking Rewards', value: 25, color: '#10B981' },
    { name: 'Development', value: 15, color: '#8B5CF6' },
    { name: 'Team & Advisors', value: 10, color: '#F59E0B' },
    { name: 'Marketing', value: 10, color: '#EF4444' }
  ], []);

  const stakingData = useMemo(() => [
    { period: '30 Days', apy: 8.5, locked: 2.4 },
    { period: '90 Days', apy: 12.3, locked: 5.8 },
    { period: '180 Days', apy: 18.7, locked: 12.1 },
    { period: '365 Days', apy: 25.2, locked: 18.9 }
  ], []);

  const tokenMetrics = useMemo(() => [
    { label: "Total Supply", value: "1,000,000,000 DEED", icon: "💎" },
    { label: "Circulating Supply", value: "450,000,000 DEED", icon: "🔄" },
    { label: "Market Cap", value: "$89.5M", icon: "📈" },
    { label: "Total Value Locked", value: "$234.8M", icon: "🔒" }
  ], []);

  const deFiFeatures = useMemo(() => [
    {
      title: "Liquidity Staking",
      description: "Earn rewards by providing liquidity to property token pools",
      apy: "15.6%",
      icon: "💧",
      totalLocked: "$45.2M"
    },
    {
      title: "Governance Voting",
      description: "Vote on property acquisitions and platform improvements", 
      apy: "8.3%",
      icon: "🗳️",
      totalLocked: "$12.8M"
    },
    {
      title: "Yield Farming",
      description: "Farm DEED tokens by staking LP tokens from property pools",
      apy: "22.4%",
      icon: "🌾",
      totalLocked: "$67.1M"
    },
    {
      title: "Real Estate Bonds",
      description: "Fixed-yield bonds backed by property rental income",
      apy: "12.8%",
      icon: "📊",
      totalLocked: "$89.3M"
    }
  ], []);

  // Memoize the tab change handler
  const handleTabChange = useCallback((tab) => {
    setActiveTab(tab);
  }, []);

  // Memoized chart components to prevent re-renders
  const PieChartComponent = useMemo(() => (
    <div className="h-80">
      <ResponsiveContainer width="100%" height="100%">
        <PieChart>
          <Pie
            data={tokenDistribution}
            cx="50%"
            cy="50%"
            outerRadius={80}
            fill="#8884d8"
            dataKey="value"
            label={({ name, value }) => `${name}: ${value}%`}
          >
            {tokenDistribution.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={entry.color} />
            ))}
          </Pie>
          <Tooltip />
        </PieChart>
      </ResponsiveContainer>
    </div>
  ), [tokenDistribution]);

  const BarChartComponent = useMemo(() => (
    <div className="h-80">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={stakingData}>
          <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
          <XAxis dataKey="period" stroke="#9CA3AF" />
          <YAxis stroke="#9CA3AF" />
          <Tooltip 
            contentStyle={{ 
              backgroundColor: '#1F2937', 
              border: '1px solid #374151',
              borderRadius: '8px'
            }}
          />
          <Bar dataKey="apy" fill="#3B82F6" radius={[4, 4, 0, 0]} />
        </BarChart>
      </ResponsiveContainer>
    </div>
  ), [stakingData]);
      totalLocked: "$67.1M"
    },
    {
      title: "Real Estate Bonds",
      description: "Fixed-yield bonds backed by property rental income",
      apy: "12.8%",
      icon: "📊",
      totalLocked: "$89.3M"
    }
  ];

  return (
    <div className="py-20 bg-gradient-to-br from-slate-900 to-slate-800">
      <div className="container mx-auto px-4">
        
        {/* Header */}
        <motion.div 
          className="text-center mb-16"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6">
            DeFi <span className="text-transparent bg-gradient-to-r from-blue-400 to-emerald-400 bg-clip-text">Tokenomics</span>
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            Revolutionizing real estate investment through advanced DeFi mechanisms and sustainable tokenomics
          </p>
        </motion.div>

        {/* Tab Navigation */}
        <div className="flex justify-center mb-12">
          <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl p-2 border border-white/10">
            {["overview", "staking", "defi"].map((tab) => (
              <button
                key={tab}
                onClick={() => handleTabChange(tab)}
                className={`px-6 py-3 rounded-xl font-medium transition-all duration-300 ${
                  activeTab === tab
                    ? "bg-gradient-to-r from-blue-600 to-emerald-600 text-white shadow-lg"
                    : "text-gray-400 hover:text-white hover:bg-white/10"
                }`}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)}
              </button>
            ))}
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === "overview" && (
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center"
          >
            {/* Token Metrics */}
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-white mb-6">Token Metrics</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {tokenMetrics.map((metric, i) => (
                  <div key={i} className="bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-white/10 hover:border-blue-400/50 transition-all duration-300">
                    <div className="flex items-center space-x-3">
                      <span className="text-2xl">{metric.icon}</span>
                      <div>
                        <div className="text-gray-400 text-sm">{metric.label}</div>
                        <div className="text-white font-bold text-lg">{metric.value}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Token Distribution Chart */}
            <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl p-8 border border-white/10">
              <h3 className="text-xl font-bold text-white mb-6 text-center">Token Distribution</h3>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={tokenDistribution}
                      cx="50%"
                      cy="50%"
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, value }) => `${name}: ${value}%`}
                    >
                      {tokenDistribution.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
          </motion.div>
        )}

        {activeTab === "staking" && (
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-8"
          >
            <div className="text-center mb-8">
              <h3 className="text-2xl font-bold text-white mb-4">Staking Rewards</h3>
              <p className="text-gray-300">Lock your DEED tokens to earn passive income and governance rights</p>
            </div>

            {/* Staking Chart */}
            <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl p-8 border border-white/10 mb-8">
              <h4 className="text-xl font-bold text-white mb-6">APY vs Lock Period</h4>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={stakingData}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis dataKey="period" stroke="#9CA3AF" />
                    <YAxis stroke="#9CA3AF" />
                    <Tooltip 
                      contentStyle={{ 
                        backgroundColor: '#1F2937', 
                        border: '1px solid #374151',
                        borderRadius: '8px'
                      }}
                    />
                    <Bar dataKey="apy" fill="#3B82F6" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Staking Options */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {stakingData.map((option, i) => (
                <div key={i} className="bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-white/10 hover:border-blue-400/50 transition-all duration-300 group">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-blue-400 mb-2">{option.apy}%</div>
                    <div className="text-white font-semibold mb-2">{option.period}</div>
                    <div className="text-gray-400 text-sm mb-4">${option.locked}M Locked</div>
                    <button className="w-full bg-gradient-to-r from-blue-600 to-emerald-600 hover:from-blue-700 hover:to-emerald-700 text-white py-2 px-4 rounded-lg font-medium transition-all duration-300 group-hover:scale-105">
                      Stake Now
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </motion.div>
        )}

        {activeTab === "defi" && (
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-8"
          >
            <div className="text-center mb-8">
              <h3 className="text-2xl font-bold text-white mb-4">DeFi Ecosystem</h3>
              <p className="text-gray-300">Explore advanced DeFi features built for real estate investment</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {deFiFeatures.map((feature, i) => (
                <motion.div
                  key={i}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: i * 0.1 }}
                  viewport={{ once: true }}
                  className="bg-slate-800/50 backdrop-blur-sm rounded-2xl p-8 border border-white/10 hover:border-blue-400/50 transition-all duration-300 group"
                >
                  <div className="flex items-center space-x-4 mb-6">
                    <div className="text-4xl">{feature.icon}</div>
                    <div>
                      <h4 className="text-xl font-bold text-white">{feature.title}</h4>
                      <div className="text-emerald-400 font-semibold">{feature.apy} APY</div>
                    </div>
                  </div>
                  
                  <p className="text-gray-300 mb-6">{feature.description}</p>
                  
                  <div className="flex items-center justify-between mb-6">
                    <div>
                      <div className="text-gray-400 text-sm">Total Locked</div>
                      <div className="text-white font-bold">{feature.totalLocked}</div>
                    </div>
                  </div>

                  <button className="w-full bg-gradient-to-r from-blue-600 to-emerald-600 hover:from-blue-700 hover:to-emerald-700 text-white py-3 px-6 rounded-xl font-medium transition-all duration-300 group-hover:scale-105">
                    Enter Pool
                  </button>
                </motion.div>
              ))}
            </div>
          </motion.div>
        )}

        {/* Call to Action */}
        <motion.div 
          className="text-center mt-16"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          viewport={{ once: true }}
        >
          <div className="bg-gradient-to-r from-blue-600/20 to-emerald-600/20 backdrop-blur-sm rounded-2xl p-8 border border-white/10">
            <h3 className="text-2xl font-bold text-white mb-4">Ready to Start Earning?</h3>
            <p className="text-gray-300 mb-6">Join thousands of investors earning passive income through real estate DeFi</p>
            <button className="bg-gradient-to-r from-blue-600 to-emerald-600 hover:from-blue-700 hover:to-emerald-700 text-white px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 transform hover:scale-105">
              Get Started Now
            </button>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default TokenomicsSection;
